封装
理解：安全，直观，方便快捷，高效。

安全：对数据封装后，可以控制对数据的访问和修改，有保护的作用。

直观：将多个变量，方法关联起来，视为一个整体，使用时见类型就可识其数据和行为,减少逻辑上的思考。

方便快捷：定义者：将一件复杂的事情零散化，每个功能独立成类，开发功能时专注于单独功能，减少考虑整体的逻辑思考。
                  由于这样也实现，整体分工，同时开发。
                  
                  对可重复使用的功能，直接调用即可。
                  
                  需要扩展的功能，可以不用修改已经定义好的内容。
          
          使用者：拿来主义即可，结果是对的即可
                  
高效：高效是方便快捷的因和果，有高效的因就有高效的果。
      
      实现的高效：正因为方便快捷，开发自然更加高效。这是果

      实行时的高效：方便快捷都是人做出来的，但是往往实行时没有结果，所以需要衡量将来是否高效的标准。
                    
                    就是参考老师的封装变化，高内聚，低耦合。





继承：
用于面向对象设计思想的开闭原则：对扩展开放，对修改关闭。

项目中，使用继承的主要原因，应该是隔离变化，将使用人和做的人隔离开。而不是想要重复使用父类的代码。
用父类来约束实体化的子类的方法。

但是继承的角度从代码角度来讲，确实有利于对代码复用，而且基于复用便使开闭得到实现。

调用者：从调用或者使用的角度应该是依赖倒置，应该是选择父类的成员，无视子类。

因为缺点基于继承后产生类和类之间耦合度太高，所以要有适用的标准
适用性：多个类在概念上是一致的，且需要进行统一的处理



多态：
多态是同一个行为具有多个不同表现形式或形态的能力
将一个抽象化的事物，赋予各种概念相同但是具现化不同的职能






设计原则：
开闭原则：可以在不修改原有代码的基础上增加功能。

单一职责：类的所有成员都是为同一件事或物服务

依赖倒置：设计的时候先从底层的实际调用的类构思高层的抽象的类

组合复用原则：当存在部分和整体的时候，派生类不是基类的特殊种类，两个类之间可以违背里氏替换

里氏替换：约束继承泛滥，是开闭原则的一种体现，子类可以扩展父类的功能，但不能改变父类原有的功能

迪米特法则：类和类间只传递必须的东西



